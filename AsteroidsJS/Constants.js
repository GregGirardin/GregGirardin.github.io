let SCREEN_WIDTH = 1200;
let SCREEN_HEIGHT = 600;
let PI = 3.14159;

export const c =
{
debugVectors : false,

SCREEN_WIDTH : SCREEN_WIDTH,
SCREEN_HEIGHT : SCREEN_HEIGHT,
SCREEN_BUFFER : 50,

swl : SCREEN_WIDTH  * .2,
swh : SCREEN_WIDTH  * .8,
shl : SCREEN_HEIGHT * .2,
shh : SCREEN_HEIGHT * .8,

NUM_SHIPS : 2,
NUM_WAVES : 3,

SHIP_MAX_ROUNDS   : 100,
SHIP_MAX_TORPEDOS : 100,
SHIP_MAX_FUEL     : 100,
SHIP_CANON_TIMER  : 10,

ASTEROID_POINTS       : 20,
BIG_ALIEN_POINTS      : 100,
SMALL_ALIEN_POINTS    : 250,
WAVE_COMP_POINTS      : 500,
CANNON_COST           : 1,
TORPEDO_COST          : 10,
TANKER_DESTROYED_COST : 100,

OBJECT_TYPE_NONE      : 0,
OBJECT_TYPE_SHIP      : 1,
OBJECT_TYPE_ALIEN     : 2,
OBJECT_TYPE_TANKER    : 3,
OBJECT_TYPE_ASTEROID  : 4,
OBJECT_TYPE_CANNON    : 5,
OBJECT_TYPE_AL_CANNON : 6,
OBJECT_TYPE_TORPEDO   : 7,
OBJECT_TYPE_T_CANNON  : 8,
OBJECT_TYPE_BH        : 9,

PI : 3.14159,
TAU : 2 * PI,
EFFECTIVE_ZERO : .00001,

CANNON_MASS : 10.0,
TORPEDO_MASS : 50.0,
SMALL_ALIEN_MASS : 25.0,
BIG_ALIEN_MASS : 50.0,
TANKER_MASS : 100,
ASTEROID_MASS : 10.0, // * radius. Should be r^2, but less inertia is fun.
IRON_ASTEROID_MASS : 15.0,
SHIP_MASS : 50,
BH_MASS : 50.0, //  * radius

THRUST_LOW : .01, // adjust based on FPS, etc.
THRUST_MED : .01 * 2,
THRUST_HI  : .01 * 3,
THRUST_MAX : .01 * 8,

MAX_SPIN : .1,
SPIN_DELTA : .025,
MIN_ASTEROID_RADIUS : 10,
SMALL_IMPULSE : 5,// How hard can things collide and bounce off

OBJECT_DIST_FAR  : SCREEN_WIDTH / 4,
OBJECT_DIST_MED  : SCREEN_WIDTH / 6,
OBJECT_DIST_NEAR : SCREEN_WIDTH / 20,

SPEED_SLOW  : 1.0,
SPEED_MED   : 1.5,
SPEED_HI    : 4.0,
SPEED_VHI   : 8.0,

EVENT_DISPLAY_COUNT : 100,

ATTACK_INIT  : 1,
ATTACK_ALIGN : 2,

TX_RESOURCE_FUEL : 1,
TX_RESOURCE_ROUNDS : 2,
TX_RESOURCE_TORPEDOS : 4,
TX_RESOURCE_ALL : 0x7,

TORPEDO_DELAY : 50, // lots of particles, need to limit how fast we send these
};